<?php

namespace app\wechat\controller;

use app\common\controller\BaseController;
use app\common\entity\RequestEntity;
use app\common\extend\Tools;
use app\common\extend\WeChat;
use EasyWeChat\Foundation\Application;
use EasyWeChat\Payment\Order;

class WeChatSetting extends BaseController
{
    const TABLE_NAME = 'partner_base_info';
    var $PARTNER_ID;
    var $WECHAT;
    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        $request_data = [
            $post_partnerid = new RequestEntity('PartnerId', '合作伙伴ID', false, 0)
        ];
        parent::Validates($request_data);
        $this->PARTNER_ID = $post_partnerid->text;
        $this->WECHAT = new WeChat(1);
    }

    /**
     * 关注微信公众平台及信息自动回复
     */
    public function BindServer()
    {
        $this->WECHAT->BindServer();
    }

    /**
     * 创建微信自定义菜单
     */
    public function CreateMenu()
    {
        $menu_data = parent::GetDataList(
            $param_table_name = 'wechat_menu_info',
            $param_field = [
                'id' => 'id',
                'menuinfo_parentid' => 'parentid',
                'menuinfo_name' => 'name',
                'menuinfo_type' => 'type',
                'menuinfo_key' => 'key',
                'menuinfo_url' => 'url',
            ],
            $param_where = [
                'menuinfo_partnerid' => 1,
                'menuinfo_showorder' => 1
            ],
            $param_order = [], $param_page = 0, $param_pagesize = 0
        );
        $arr_menu = [];
        foreach($menu_data as $menu){
            if($menu['parentid'] == '0'){
                $menu['sub_button'] = [];
                array_push($arr_menu, $menu);
            }
        }
        for($i = 0;$i<sizeof($arr_menu);$i++){
            foreach($menu_data as $children){
                if($arr_menu[$i]['id'] == $children['parentid']){
                    array_push($arr_menu[$i]['sub_button'], $children);
                }
            }
        }
        $menu = $this->WECHAT->WECHAT_APP->menu;
        $menu->add($arr_menu);
        parent::ResponseJson(true);
    }

    /**
     * 删除全部自定义菜单
     */
    public function RemoveMenu()
    {
        $menu = $this->WECHAT->WECHAT_APP->menu;
        $menu->destroy();
    }

    /**
     * 微信支付配置信息
     */
    public function PaymentConfig ()
    {
        $result = parent::GetDataInfo(
        //设置表名
            $param_table_name = self::TABLE_NAME,
            //设置查询字段
            $param_field = [
                'partnerinfo_wechat_appid' => 'AppId',
                'partnerinfo_wechat_appsecret' => 'AppSecret',
                'partnerinfo_wechat_token' => 'Token',
                'partnerinfo_wechat_aeskey' => 'AESKey',
                'partnerinfo_wechat_signature' => 'Signature',      //签名
                'partnerinfo_wechat_publickey' => 'PublicKey',      //公钥
                'partnerinfo_wechat_privatekey' => 'PrivateKey',    //私钥
                'partnerinfo_wechat_merchantid' => 'MerchantId'     //商户号
            ],
            //设置查询条件
            $param_where = [
                'id' => 1,
            ]
        );
        $options = [
            // 前面的appid什么的也得保留哦
            'app_id' => $result['AppId'],
            'secret' => $result['AppSecret'],
            'token' => $result['Token'],
            'aes_key' => $result['AESKey'],
            // ...
            // payment
            'payment' => [
                'merchant_id'        => $result['PublicKey'],
                'key'                => $result['Signature'],
                'cert_path'          => 'path/cert.pem', // XXX: 绝对路径！！！！
                'key_path'           => 'path/key',      // XXX: 绝对路径！！！！
                'notify_url'         => 'http://123.206.9.224/wechat/WeChatSetting/Notify',       // 你也可以在下单时单独设置来想覆盖它
                // 'device_info'     => '013467007045764',
                // 'sub_app_id'      => '',
                // 'sub_merchant_id' => '',
                // ...
            ],
        ];
        return new Application($options);
    }

    /**
     * 发起微信支付
     */
    public function Payment ()
    {
        $app = $this->PaymentConfig();
        $payment = $app->payment;
        $attributes = [
            'trade_type'       => 'JSAPI', // JSAPI，NATIVE，APP...
            'body'             => 'iPad mini 16G 白色',
            'detail'           => 'iPad mini 16G 白色',
            'out_trade_no'     => '1217752501201407033233368018',
            'total_fee'        => 1, // 单位：分
            'notify_url'       => '', // 支付结果通知网址，如果不设置则会使用配置里的默认地址
            'openid'           => '0w1X6OxKtYnej9o1ywsL51o', // trade_type=JSAPI，此参数必传，用户在商户appid下的唯一标识，
            // ...
        ];
        $order = new Order($attributes);
        $result = $payment->prepare($order);
        if ($result->return_code == 'SUCCESS' && $result->result_code == 'SUCCESS'){
            $prepayId = $result->prepay_id;
        }
    }

    /**
     * 微信支付状态通知
     */
    public function Notify ()
    {
        $app = $this->PaymentConfig();
        $response = $app->payment->handleNotify(function($notify, $successful){
            // 你的逻辑
            return true; // 或者错误消息
        });
        $response->send();
    }
}